
package com.mercerenies.befreak
package source

enum Instruction(val representation: Char):
  override def toString: String = representation.toString

  case Number(n: Int) extends Instruction((n + '0').toChar)
  case PushZero extends Instruction('(')
  case PopZero extends Instruction(')')
  case MainToCtrl extends Instruction('[')
  case CtrlToMain extends Instruction(']')
  case SwapCtrl extends Instruction('$')
  case Write extends Instruction('w')
  case Read extends Instruction('r')
  case Increment extends Instruction('\'')
  case Decrement extends Instruction('`')
  case Add extends Instruction('+')
  case Sub extends Instruction('-')
  case Div extends Instruction('%')
  case Mul extends Instruction('*')
  case Not extends Instruction('~')
  case And extends Instruction('&')
  case Or extends Instruction('|')
  case Xor extends Instruction('#')
  case LeftRot extends Instruction('{')
  case RightRot extends Instruction('}')
  case ToggleCtrl extends Instruction('!')
  case Equal extends Instruction('=')
  case LT extends Instruction('l')
  case GT extends Instruction('g')
  case Swap extends Instruction('s')
  case Dig extends Instruction('d')
  case Bury extends Instruction('b')
  case Flip extends Instruction('f')
  case Swapd extends Instruction('c')
  case Over extends Instruction('o')
  case Under extends Instruction('u')
  case Dup extends Instruction(':')
  case Dedup extends Instruction(';')
  case StringMode extends Instruction('"')
  case ReverseMode extends Instruction('?')
  case Halt extends Instruction('@')
  case BMirror extends Instruction('\\')
  case FMirror extends Instruction('/')
  case Left extends Instruction('>')
  case Right extends Instruction('<')
  case Down extends Instruction('v')
  case Up extends Instruction('^')
  case Space extends Instruction(' ')
end Instruction
